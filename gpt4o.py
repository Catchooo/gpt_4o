import asyncio
import platform
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import g4f
import html

if platform.system() == "Windows":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

BOT_TOKEN = "7783506104:AAE-eH3yGUFMu8Md76g01h4Uqred1yIs494"

bot = telebot.TeleBot(BOT_TOKEN)

chat_contexts = {}

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="üîÑ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –±–µ—Å—ñ–¥—É"))
    return keyboard

def split_long_message(message, chunk_size=4096):
    return [message[i:i + chunk_size] for i in range(0, len(message), chunk_size)]

@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "üëã –ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ GPT - 4 ü§ñ.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å —è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è!üí°\n"
        "–Ü–Ω–æ–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 5 —Ö–≤–∏–ª–∏–Ω. üïíüòä\n\n"
        "–ü–æ—á–Ω–µ–º–æ? üéâ",
        reply_markup=get_main_keyboard()
    )
    chat_contexts[chat_id] = [{"role": "system", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –≤–º–µ—Å—Ç–æ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π *, /, ^, ‚â§, ‚â•, ‚â†, ‚àë, ‚àè, ‚àö –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é."}]

@bot.message_handler(func=lambda msg: msg.text == "üîÑ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –±–µ—Å—ñ–¥—É")
def end_chat(message):
    chat_id = message.chat.id
    if chat_id in chat_contexts:
        chat_contexts.pop(chat_id)
    bot.send_message(chat_id, "–ù—É —Ç—ñ–ø–∞ –ø–æ–∫–∞. üòä")
    chat_contexts[chat_id] = [{"role": "system", "content": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–≤–∏—á–∞–π–Ω—ñ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –∑–Ω–∞–∫–∏ –∑–∞–º—ñ—Å—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π *, /, ^, ‚â§, ‚â•, ‚â†, ‚àë, ‚àè, ‚àö –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é."}]

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    chat_id = message.chat.id
    user_input = message.text.strip()

    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = [{"role": "system", "content": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á—ñ—Ç–∫–æ —Ç–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."}]
    
    chat_contexts[chat_id].append({"role": "user", "content": user_input})

    bot.send_chat_action(chat_id, "typing")

    prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: '{user_input}'. –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á—ñ—Ç–∫–æ —Ç–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    prompt += "\n–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤:\n" + "\n".join([item["content"] for item in chat_contexts[chat_id]])

    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
        )

        if isinstance(response, dict) and 'choices' in response:
            assistant_message = response['choices'][0]['message']['content']
        else:
            assistant_message = str(response)

    except Exception as e:
        assistant_message = f"–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.: {str(e)}"

    chat_contexts[chat_id].append({"role": "assistant", "content": assistant_message})

    decoded_response = html.unescape(assistant_message)
    split_messages = split_long_message(decoded_response)
    
    for msg in split_messages:
        bot.send_message(chat_id, msg)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    bot.infinity_polling()
